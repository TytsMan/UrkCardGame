//
//  GameDataProvider.swift
//  UrkCardGame
//
//  Created by Ivan on 03/10/2022.
//

import Foundation

import Foundation

protocol GameDataProviderProtocol {
    
    func getQuestions() -> [Question]
    func getPenalties() -> [Penalty]
    func getBlame() -> [Blame]
    
}

class GameDataProvider: GameDataProviderProtocol {
    
    func getQuestions() -> [Question] {
        let filename = "Questions"
        let strings = readFile(withName: filename)
        let questions = strings.map(Question.init)
        return questions
    }
    
    func getPenalties() -> [Penalty] {
        let filename = "Penalties"
        let strings = readFile(withName: filename)
        let penalties = strings.map(Penalty.init)
        return penalties
    }
    
    func getBlame() -> [Blame] {
        
        let titles: [String] = [
            "–ê —Ç–∏ —Ç–æ—á–Ω–æ –Ω–µ —Å—ç–ø–∞—Ä?",
            "–ù–∞–≤—ñ—Ç—å –ê—Ä–µ—Å—Ç–æ–≤–∏—á –≤ —à–æ—Ü—ñ",
            "–ó–Ω—É—â–∞—î—à—Å—è?",
            "–¢–æ–±—ñ –Ω–µ —Å–æ—Ä–æ–º–Ω–æ?",
            "–ó–Ω–æ–≤—É –Ω–µ–≤–¥–∞–ª–æ!",
            "–°—ñ–¥–∞–π –î–≤–∞!",
            "–¢—Ä–∏–º–∞–π—Å—è!"
        ]
        
        let descriptions: [String] = [
            "–í–∏–∫–æ–Ω–∞–π –∑–∞–≤–¥–∞–Ω–Ω—è —â–æ–± –¥–æ–≤–µ—Å—Ç–∏ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–µ üá∫üá¶",
            "–í–∏–∫–æ–Ω–∞–π –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞—Ä–∞–∑, –∞ –Ω–µ —á–µ—Ä–µ–∑ ‚Äú2-3 –Ω–µ–¥–µ–ª–∏‚ÄùüòÇ",
            "–ú–µ–Ω—ñ —Å–æ—Ä–æ–º–Ω–æ –∑–∞ —Ç–µ–±–µ, –∞–Ω—É –±—ñ–≥–æ–º –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è",
            "–í–∏–∫–æ–Ω—É–π –∑–∞–≤–¥–∞–Ω–Ω—è —Å–∫–æ—Ä—ñ—à!",
            "–¢–∞–∫ –≤–∏–≥–ª—è–¥–∞—î –ø–æ–ª—É–Ω–∏—Ü—è? –í–∏–∫–æ–Ω—É–π –∑–∞–≤–¥–∞–Ω–Ω—è –±—ñ–≥–æ–º!",
            "–¶–µ –Ω—ñ–∫—É–¥–∏ –Ω–µ –≥–æ–¥–∏—Ç—å—Å—è, –∞–Ω—É –±—ñ–≥–æ–º –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω—É–≤–∞—Ç—å",
            "–ù–µ–≤–¥–∞—á—ñ —Ä–æ–±–ª—è—Ç—å —Ç–µ–±–µ —Å–∏–ª—å–Ω—ñ—à–µ, –∞ –ø–æ–∫–∏ –≤–∏–∫–æ–Ω—É–π –∑–∞–≤–¥–∞–Ω–Ω—è"
        ]
        
        var result = Array<Blame>()
        result.reserveCapacity(max(titles.count, descriptions.count))
        
        for (title, text) in zip(titles, descriptions) {
            result.append(Blame(title: title, text: text))
        }

        return result
    }
    
    private func readFile(withName filename: String) -> [String] {
        var result: [String] = []
        
        do {
            let path = Bundle.main.path(forResource: "\(filename)", ofType: "txt")
            let contents = try String(contentsOfFile: path!, encoding: String.Encoding.utf8)
            let lines = contents.split(separator:"\n")
            result = lines.map(String.init)
        } catch {
            print(error.localizedDescription)
        }
        return result
    }
}
